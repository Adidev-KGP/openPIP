<?php
namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;


/**
 * @ORM\Entity
 * @ORM\Table(name="`protein`")
 */
class Protein
{
	/**
	 * @ORM\Id
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	public $id;
	

	
	/**
	 * @ORM\ManyToMany(targetEntity="Protein", mappedBy="isoforms")
	 */
	private $proteins;
	
	/**
	 * @ORM\ManyToMany(targetEntity="Protein", inversedBy="proteins")
	 * @ORM\JoinTable(name="protein_isoform",
	 *      joinColumns={@ORM\JoinColumn(name="protein_id", referencedColumnName="id")},
	 *      inverseJoinColumns={@ORM\JoinColumn(name="isoform_id", referencedColumnName="id")}
	 *      )
	 */
	private $isoforms;
	
	
    /**
     * @var \Doctrine\Common\Collections\ArrayCollection|Organism[]
     * @ORM\ManyToMany(targetEntity="Organism", mappedBy="proteins")
     */
	public $organisms;
	
	/**
	 * @var \Doctrine\Common\Collections\ArrayCollection|Identifier[]
	 * @ORM\ManyToMany(targetEntity="Annotation", mappedBy="proteins")
	 */
	public $annotations;
	
   /**
     * @ORM\OneToMany(targetEntity="Domain", mappedBy="protein")
     */
	public $domains;
	
	/**
	 * @var \Doctrine\Common\Collections\ArrayCollection|Identifier[]
	 * @ORM\ManyToMany(targetEntity="Identifier", mappedBy="proteins")
	 */
    public $identifiers;
    
    /**
     * @var \Doctrine\Common\Collections\ArrayCollection|Identifier[]
     * @ORM\ManyToMany(targetEntity="Complex", mappedBy="proteins")
     */
    public $complexes;
	
   /**
     * @ORM\OneToMany(targetEntity="Interaction", mappedBy="protein")
     */
    public $interactions;
    
    
    /**
     * @ORM\OneToMany(targetEntity="Experiment", mappedBy="protein", cascade={"persist"})
     */
    public $experiments;
    
    
    /**
     * @ORM\OneToMany(targetEntity="External_Link", mappedBy="protein", cascade={"persist"})
     */
    public $external_links;
    
    /**
     * @ORM\OneToOne(targetEntity="Tissue_Expression")
     * @ORM\JoinColumn(name="tissue_expression_id", referencedColumnName="id")
     */
    public $tissue_expression;
    
    /**
     * @ORM\OneToOne(targetEntity="Subcellular_Location_Expression")
     * @ORM\JoinColumn(name="subcellular_location_expression_id", referencedColumnName="id")
     */
    public $subcellular_location_expression;
    
    /**
     * @ORM\ManyToMany(targetEntity="User" , inversedBy="proteins")
     * @ORM\JoinTable(name="user_protein",
     *      joinColumns={
     *      		@ORM\JoinColumn(name="protein_id", referencedColumnName="id")
     *      	},
     *      inverseJoinColumns={
     *      		@ORM\JoinColumn(name="user_id", referencedColumnName="id")
     *      	}
     * 		)
     */
    public $users;
    
    
	public function __construct() {
		$this->users= new \Doctrine\Common\Collections\ArrayCollection();
		$this->interactions = new \Doctrine\Common\Collections\ArrayCollection();
		$this->domains = new \Doctrine\Common\Collections\ArrayCollection();
		$this->identifiers = new \Doctrine\Common\Collections\ArrayCollection();
		$this->organisms = new \Doctrine\Common\Collections\ArrayCollection();
		$this->external_links = new \Doctrine\Common\Collections\ArrayCollection();
		$this->isoforms = new \Doctrine\Common\Collections\ArrayCollection();
		$this->experiments= new \Doctrine\Common\Collections\ArrayCollection();
		$this->complexes= new \Doctrine\Common\Collections\ArrayCollection();
		$this->annotations = new \Doctrine\Common\Collections\ArrayCollection();
	}
	
	/**
	 * @ORM\Column(type="string", length=100, nullable=true)
	 */
	protected $uniprot_id;
	
	/**
	 * @ORM\Column(type="string", length=100, nullable=true)
	 */
	protected $ensembl_id;
	
	/**
	 * @ORM\Column(type="string", length=100, nullable=true)
	 */
	protected $entrez_id;
	
	/**
	 * @ORM\Column(type="string", length=100, nullable=true)
	 */
	protected $gene_name;
	
	/**
	 * @ORM\Column(type="string", length=1000, nullable=true)
	 */
	protected $sequence;
	
	
	/**
	 * @ORM\Column(type="string", length=10000, nullable=true)
	 */
	protected $description;
	

}
