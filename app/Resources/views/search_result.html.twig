{% extends 'base.html.twig' %}

{% block stylesheets %}
	<link rel="stylesheet" href="../../../../assets/css/bootstrap.min.css">
	<link href="../../../../../vendor/footable/css/footable.core.css" rel="stylesheet" type="text/css" />
	<link href="../../../../../vendor/footable/demos/css/footable-demos.css" rel="stylesheet" type="text/css" />
	<link rel="stylesheet" href="../../../../assets/css/jquery.qtip.css">
	<link rel="stylesheet" href="../../../../bundles/spectrum/spectrum.css">
	<link rel="stylesheet" href="../../../../assets/css/main.css">
	<link rel="stylesheet" href="../../../../assets/css/search.css">
	<link rel='shortcut icon' href='../../../../assets/images/tor_ibin_icon.ico' />
{% endblock %}



{% block title %}TOR-IBIN | Results{% endblock %}

{% block content %}
<header>
	<nav class="navbar navbar-default">
	  <div class="container-fluid">
	    <div class="navbar-header tor_ibin_header">
	    	<img  alt="" src="../../../../assets/images/tor_ibin_logo.png" class="logo left">
	        <h5 class="nav-header">TOR-IBIN Admin</h5>
		    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		        <span class="icon-bar"></span>
		    </button>
		 </div>  
		 <div id="myNavbar" class="collapse navbar-collapse">
		    <ul class="nav navbar-nav">
		      <li><a href="{{ path('admin_home') }}">Home</a></li>
		      <li class="active"><a href="{{ path('search') }}">Search</a></li>
		      <li><a href="{{ path('announcement_manager') }}">Announcements</a></li>
		      <li><a href="{{ path('data_manager') }}">Data</a></li>
		      <li><a href="{{ path('file_manager', {'upload_directory': 'FASTA'}) }}">Files</a></li> 
			</ul>
			<ul class="nav navbar-nav navbar-right">
			   <li><a href="{{ path('user_logout') }}">Logout</a></li>
		    </ul>
		 </div>
	  </div>
	  <div class="shadow"></div>
	</nav>
</header>
<main>
		<div class="row" style="background-color: #EEEEEE;" >
			<div class="col-sm-12">		
				<div id='cy' >
				</div>
			</div>		
		</div>
		<div class="row">
			<div class="shadow"></div>

					<div class="row">
						<ul class="nav nav-tabs" style="margin: auto; width:40%;">
						  <li  class="active"><a data-toggle="tab" href="#network">Network</a></li>
						  <li><a data-toggle="tab" href="#downloads">Downloads</a></li>
						  <li><a data-toggle="tab" href="#view_settings">View Settings</a></li>
						  <li><a data-toggle="tab" href="#data_settings">Data Settings</a></li>
						</ul>
					</div>
					<div class="row">
						<div class="tab-content">
							<div id="network" class="tab-pane fade in active">
							
								<div class="container">				
								    <h3>Interactions</h3>
								   
								    <div class="input-group input-group-sm">
								    	Page Size:
						                <select id="change-page-size">
											<option value="2">2</option>
											<option value="3" selected>3</option>
						                    <option value="5">5</option>
						                    <option value="10">10</option>
						                </select>
						           	</div>
								    {% if interaction_array|length > 0 %}
									    <table class="footable table "  data-page-size="3">
									        <thead>
									            <tr>
									                <th>Interactor A Id</th>
									                <th>Interactor A Gene Name</th>
									                <th>Interactor B Id</th>
									                <th>Interactor B Gene Name</th>
									                <th>Score</th>
									                <th>Binding Start</th>
									                <th>Binding End</th> 
									            </tr>
									        </thead>
									        <tbody>
									        
										        {% for interaction in interaction_array %}
										            <tr>
												       <td>{{ interaction.interactor_A_id }}</td>
												       <td>{{ interaction.interactor_A_gene_name }}</td>
												       <td>{{ interaction.interactor_B_id }}</td>
												       <td>{{ interaction.interactor_B_gene_name }}</td>
												       <td>{{ interaction.score }}</td>
												       <td>{{ interaction.binding_start }}</td>
												       <td>{{ interaction.binding_end}}</td>
										            </tr>
										        {% endfor %}
										        
									        </tbody>
									        <tfoot>
												<tr>
													<td colspan="5">
														<div class="pagination pagination-centered"></div>
													</td>
												</tr>
											</tfoot>
									    </table>
								    {% else %}
								    	<p>No Interactions Found</p>
								    {% endif %}
								</div>	
							</div>	
							<div id="downloads" class="tab-pane fade">
								<div class="container">	
									<p>as a bitmap image: <a class="png" href="">download</a> file format is 'PNG': portable network graphic</p>
									<p>vector graphic:	<a href="#">download</a> SVG: scalable vector graphic</p>
									<p>tabular text output:	 <a href="#">download</a> 	TSV: tab separated values</p>
									<p>CSV:	 <a href="#">download</a> Comma seperated values</p>
									<p>XML:	 <a href="#">download</a> structured XML interaction data, according to the 'PSI-MI' data standard</p>			
									<p>protein sequences:	: <a href="#">download</a> MFA: multi-fasta format - containing the aminoacid sequences in the network</p>
									<p>as a bitmap image: <a href="#">download</a> file format is 'PNG': portable network graphic</p>
								</div>
							</div>		
							<div id="view_settings" class="tab-pane fade">
							
								<div class= "data_settings">
									<form style="margin: auto;">
										<div class="row">
											<p>Layout</p>
											<select>
											  <option value="Concentric">Concentric</option>
											  <option value="Breadth-first">Breadth-first</option>
											</select>

											
										</div>
										</br>
										<div class="row">
											<button type="submit" class="btn btn-success" style="margin-right: 10px;" ">
												<span>Update</span>
											</button>
										</div>	
									</form>
								</div>
							
							</div>
							<div id="data_settings" class="tab-pane fade">
							
								<div class= "data_settings">
									<form style="margin: auto;">
										<div class="row">
											<p>Minimum required interaction score </p><input type='text'/>
											<p>Max Number of interactions </p><input type='text'/>
											
										</div>
										</br>
										<div class="row">
											<button type="submit" class="btn btn-success" style="margin-right: 10px;" ">
												<span>Update</span>
											</button>
										</div>	
									</form>
								</div>
							</div>
							<a class="btn btn-primary right" style="margin-right: 10%; margin-top: 1%; " href="{{ path('search') }}">
								<i class="glyphicon glyphicon-triangle-left"></i>
								<span>Back</span>
							</a>
						</div>		
					</div>	
				</div>

</main>
{% endblock %}
{% block javascripts %}
{{ tinymce_init() }}
<script src="../../../../assets/js/jquery-2.1.4.min.js"></script>
<script src="../../../../assets/js/bootstrap.min.js"></script>
<script src="../../../../../vendor/footable/js/footable.js" type="text/javascript"></script>
<script src="../../../../../vendor/footable/js/footable.paginate.js" type="text/javascript"></script>
<script src="../../../../../vendor/footable/demos/js/bootstrap-tab.js" type="text/javascript"></script>
<script src="../../../../../vendor/footable/demos/js/demos.js" type="text/javascript"></script>
<script src="../../../../assets/js/cytoscape.min.js"></script>
<script src="../../../../assets/js/cytoscape-qtip.js"></script>
<script src="../../../../assets/js/jquery.qtip.js"></script>
<script src="../../../../assets/js/search_results.js"></script>
<script>
$(function(){

	var cy = cytoscape({
		
	  container: document.getElementById('cy'),
	  
	  elements: {
	      nodes: [],      
	      edges: []
	    },
 
	  style: [
	          {
			    selector: '$node',
			    css: {
			      'padding-top': '10px',
			      'padding-left': '10px',
			      'padding-bottom': '10px',
			      'padding-right': '10px',
			      'text-valign': 'top',
			      'text-halign': 'center',
			      'background-color': '#55ACEE'
			    }
			  },
	          {
	            selector: '$node > node',
	            css: {
	              'content': 'data(protein_name)',
	              'padding-top': '10px',
	              'padding-left': '10px',
	              'padding-bottom': '10px',
	              'padding-right': '10px',
	              'text-valign': 'top',
	              'text-halign': 'center',
	              'background-color': '#ddd',

	            }
	          },
	          {
	            selector: 'edge',
	            css: {

	            	  'line-color' : '#aaa'
	            }
	          },
	          {
	            selector: ':selected',
	            css: {
	              'background-color': 'black',
	              'line-color': 'black',
	              'target-arrow-color': 'black',
	              'source-arrow-color': 'black'
	            }
	          }
	      ]
	});

	var result = $.parseJSON('{{ json | raw }}');

	var domainArray = result.domain;
	var proteinOfIntrestArray = result.protein_of_intrest;
	var interactingProteinNodeArray = result.interacting_protein_nodes;
	var edgeArray = result.edge;
	
	for (i = 0; i < proteinOfIntrestArray.length; ++i) {

		var proteinId = proteinOfIntrestArray[i][0];
		var proteinName = proteinOfIntrestArray[i][1];
		var domainId = proteinOfIntrestArray[i][2]; 
		var domainName = proteinOfIntrestArray[i][3]; 
		var nodeProteinId = proteinId + "_" + proteinName;
		var nodeDomainId = domainName;

		
		cy.add([{ 
			group: "nodes",
			data: { id: nodeProteinId, protein_name: proteinName },
			classes: "protein_of_intrest"
		}]);
		
		cy.add([{ 
			group: "nodes",
			data: { id: nodeDomainId, name_domain: domainId, domain_name: domainName, protein_name: proteinName, parent: nodeProteinId},
			classes: "domain"
		}]);
	}
	
	for (i = 0; i < interactingProteinNodeArray.length; ++i) {
		

		var proteinId = interactingProteinNodeArray[i][0];
		var proteinName = interactingProteinNodeArray[i][1];
		var nodeProteinId = proteinId + "_" + proteinName;

		cy.add([{ 
			group: "nodes",
			data: { id: nodeProteinId, protein_name: proteinName },
			classes: "interacting_protein_node"
		}]);

	}

	for (i = 0; i < edgeArray.length; ++i) {
		
		var sourceDomainId = edgeArray[i][0];
		var domainName = edgeArray[i][1];
		var targetProteinId = edgeArray[i][2];
		var sourceProteinName = edgeArray[i][3];
		var targetProteinName = edgeArray[i][4];
		var modeData = edgeArray[i][5];
		var scoreData = edgeArray[i][6];
		var nodeSourceDomainId = domainName;
		var nodeTargetProteinId = targetProteinId + '_' + targetProteinName;
		var edgeID = sourceDomainId + ',' + domainName + ',' + targetProteinId + ',' + targetProteinName + ',' + modeData + ',' + scoreData;

		//add edge data to cytoscape
    	cy.add([{ 
    		group: "edges", 
    		data: { 
    			id: edgeID, 
    			weight: 1,
    			source: nodeSourceDomainId, 
    			target: nodeTargetProteinId, 
    			interaction: sourceProteinName + '-' + targetProteinName,
    			domain: domainName,
    			mode: modeData, 
    			score: scoreData} 
    	}]);
    	

	}

	cy.center();
	
	cy.layout({ 
		name: 'concentric',
		avoidOverlap: true,
		equidistant: true,
		minNodeSpacing: 50,
	});
	
	cy.edges().qtip({
		content: function(){ 
			return 'Interaction: ' + this.data('interaction') + '<br/>'	
		},
		position: {
			my: 'top center',
			at: 'bottom center'
		},
		style: {
			classes: 'qtip-bootstrap',
			tip: {
				width: 16,
				height: 8
			}
		}
	});


	
	

	
	cy.$('.interacting_protein_node').qtip({

		content: function(){ 
			var proteinName = this.data('protein_name');


			return '<div class="container"><div class="row"><h4>Information</h4></div><div class="row">Protein Name: ' + proteinName + '</div><div class="row"><h4>Actions</h4></div><div class="row"><a href="">Search for this node</a></div><div class="row"><a href="">Show protein sequence</a></div>';			
				
		},
		position: {
			my: 'top center',
			at: 'bottom center'
		},
		style: {
			classes: 'qtip-bootstrap',
			tip: {
				width: 16,
				height: 8
			}
		},
	});
	
	
	var domain_colours = ["black", "#ca0020", "#f4a582", "#0571b0", "#ffffbf", "#92c5de"];





	
	
	for (i = 0; i < domainArray.length; ++i) {
		
		var domainID = domainArray[i];
		var domainColour = domain_colours[i];
		var domainSelector = '#' + domainID;

		
		cy.$(domainSelector).neighborhood( 'edge' ).style({'line-color' : domainColour });
		cy.$(domainSelector).neighborhood( 'node' ).style({'background-color': domainColour });
		cy.$(domainSelector).roots().style({'background-color': domainColour });
		
		cy.$(domainSelector).qtip({
		    show: {
	            solo: true,
		    },
			content: function(){ 
				
				return 'Protein Name: ' + domainSelector + this.data('protein_name')	+ '</br>' +
				'Domain Name: ' + this.data('domain_name') +
				'Id: ' + this.data('id')+"<input type='text' class='" + this.data('domain_name') + "' />" + "<script>$('." + this.data('domain_name') + "').spectrum({color: "+ "'" + domainColour + "'" + ", change: function(color_change) { var colourChanged = color_change.toHexString();	var cy = cytoscape({container: document.getElementById('cy')}); cy.$('#" + this.data('domain_name') + "').roots().style({'background-color' : colourChanged }); cy.$('#" + this.data('domain_name') + "').neighborhood( 'edge' ).style({'line-color' : colourChanged }); cy.$('#" + this.data('domain_name') + "').neighborhood( 'node' ).style({'background-color': colourChanged });    }});</script" + '>'
			},
			position: {
				my: 'top center',
				at: 'bottom center'
			},
			style: {
				classes: 'qtip-bootstrap',
				tip: {
					width: 16,
					height: 8
				}
			},

		});
	}

	cy.$('.protein_of_intrest').style({'background-color': '#CCCCCC'});


	$(".basic").spectrum({
	    color: "#f00",
	    change: function(color) {
	        $("#basic-log").text("change called: " + color.toHexString());
	    }
	});
	
});


</script>
<script src="{{ asset('bundles/fosjsrouting/js/router.js') }}"></script>
<script src="{{ path('fos_js_routing_js', { callback: 'fos.Router.setData' }) }}"></script>
<script src="../../../../assets/js/cytoscape-qtip.js"></script>
<script src="../../../../assets/js/jquery.qtip.js"></script>
<script src='../../../../bundles/spectrum/spectrum.js'></script>
<script src="../../../../assets/js/main.js"></script>
<script type="text/javascript">
$(function () {
	$('table').footable();

			$('#change-page-size').change(function (e) {
				e.preventDefault();
				var pageSize = $(this).val();
				$('.footable').data('page-size', pageSize);
				$('.footable').trigger('footable_initialized');
			});

});
</script>

<script>
$(document).on("click", ".basic", spectrum({
    color: "#f00",
    change: function(color) {
        $("#basic-log").text("change called: " + color.toHexString());
    }
});

</script>

<script>

var jsonVar = '{"domain" : "1"}';
$.getJSON(jsonVar, function(result){
	var domainsString = result.domain;
	alert('domainsString');
});
</script>
{% endblock %}
